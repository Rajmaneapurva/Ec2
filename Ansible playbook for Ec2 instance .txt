EC2 Instance Provisioning:

Create Ansible playbooks to automate the provisioning of EC2 instances. Include options for specifying instance types, AMIs, key pairs, security groups, and tags.  



1. Create an Ec2 instance. coonect to it via ssh. 
2. Install Ansible - yum install ansible 
	Install Python - yum install python 
	Install boto - yum install boto3( python package to provide interface  with aws)
	****IMP*** Install amazon.aws
	ansible-galaxy collection install amazon.aws:==3.3.1 --force
	ansible-galaxy collection install community.aws
3. We need cloud creds to deploy instances on cloud. 
	(a) Make IAM user - get admin access and take user access key and secert access key for ec2 deployment 
	(b) Make IAM role with ec2 full access and attach this role to ansible instances and deploy the playbook.
	
4.IAM - create role with use case:  Ec2 , give permission : Amazonec2fullaccess, give role name:Ansible_role

5. Attach this role to ec2 instance : Go to Instance select your instance: ansible node, go to actions-security-modify IAM role, select your role and click on update IAM role.
	
	
Lauch Basic EC@2 instance in mumbai region.

- name: Ansible Play
  hosts: localhost
  connection: local
  become: False
  tasks:
  - name:   launching AWS instance using Ansible

    amazon.aws.ec2_instance:
      key_name: "Your key in ec2 dashboard"
      region: ap-south-1
      instance_type: t2.micro
      image_id: "AMI ID"
      tags:
        Name: Demo_server


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 ##### cat stop.yml

- name: Stop instances
  hosts: localhost
  tasks:
    - name: Stop instances that were previously launched
      amazon.aws.ec2_instance:
        state: stopped
        region: ap-south-1
        tags:
           Name: Daemo_server

##### cat start.yml

- name: Start instances
  hosts: localhost
  tasks:
    - name: Start instances that were previously Stoped
      amazon.aws.ec2_instance:
        state: running
        region: ap-south-1
        tags:
           Name: Daemo_server

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#### cat terminate.yml

- name: Terminate instances
  hosts: localhost
  tasks:
    - name: Terminate instances that were previously created
      amazon.aws.ec2_instance:
        state: absent
        region: ap-south-1
        instance_ids: i-0ba6a0603d368f193
		
		
		
		
#### Get instance details 		
		
---
- name: Check EC2 Instance State
  hosts: localhost
  gather_facts: false
  #vars:
   # aws_access_key: "your_aws_access_key"
   # aws_secret_key: "your_aws_secret_key"
   # aws_region: "your_aws_region"
   # instance_ids:
      - "your_instance_id"

  tasks:
    - name: Get EC2 Instance Facts
      amazon.aws.ec2_instance_info:
        #aws_access_key: "{{ aws_access_key }}"
        #aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        #instance_ids: "{{ instance_ids }}"
      register: ec2_instance_info

    - name: Display EC2 Instance State
      debug:
        msg: "Instance ID: {{ item.instance_id}},State: {{ item.state.name}},Name: {{item.tags.name}}"
		with_items: "{{ ec2_instance_info.instances}}"

		
		